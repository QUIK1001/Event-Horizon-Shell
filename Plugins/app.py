import sys
import subprocess
import os
import importlib
print("–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫. –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –ø–ª–∞–≥–∏–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
def ensure_packages():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã"""
    packages = [
        'numpy', 
        'scipy', 
        'matplotlib', 
        'streamlit',
        'plotly',
        'pandas',
        'sympy'
    ]
    missing = []
    
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    for package in packages:
        try:
            importlib.import_module(package)
            print(f"{package} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print(f"{package} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            missing.append(package)
    
    if missing:
        print(f"\n–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤: {', '.join(missing)}")
        for package in missing:
            try:
                print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}...")
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install", package
                ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                print(f"{package} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.CalledProcessError:
                print(f" –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}")
                return False
    else:
        print("–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    return True

if not ensure_packages():
    print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    sys.exit(1)

def is_streamlit_script(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª Streamlit —Å–∫—Ä–∏–ø—Ç–æ–º"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            streamlit_indicators = [
                'import streamlit',
                'from streamlit',
                'st.',
                'streamlit.',
                'st.set_page_config',
                'st.title(',
                'st.write('
            ]
            return any(indicator in content for indicator in streamlit_indicators)
    except:
        return False

def run_streamlit_app(script_path):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        print(f"–ó–∞–ø—É—Å–∫ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {os.path.basename(script_path)}")
        print("–û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8501")
        print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –≤ —ç—Ç–æ–º –æ–∫–Ω–µ")
        
        process = subprocess.Popen([
            sys.executable, "-m", "streamlit", "run", script_path,
            "--server.port", "8501",
            "--browser.serverAddress", "localhost"
        ])
        
        process.wait()
        return True
        
    except KeyboardInterrupt:
        print("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        if 'process' in locals():
            process.terminate()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Streamlit: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≥–∏–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    if not ensure_packages():
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        input("Press Enter to continue...")
        return
    
    current_file = os.path.abspath(__file__)
    
    if is_streamlit_script(current_file):
        success = run_streamlit_app(current_file)
        if not success:
            input("Press Enter to continue...")
        return
    

import streamlit as st
import numpy as np
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import sympy as sp
from scipy import optimize, integrate, linalg, fft
from scipy.interpolate import make_interp_spline
import json
from datetime import datetime
import base64
import math

st.set_page_config(
    page_title="–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
    page_icon="üßÆ",
    layout="wide",
    initial_sidebar_state="expanded"
)
st.caption("by quik")
st.markdown("""
<style>
    .main { padding: 0rem 1rem; }
    .stTabs [data-baseweb="tab-list"] button { font-size: 1.1rem; }
    h1 { color: #1f77b4; }
    .stAlert { border-radius: 10px; }
    .stButton>button {
        background-color: #1F77B4;
        color: white;
        border: none;
    }
    .stButton>button:hover {
        background-color: #1668A1;
        color: white;
    }
</style>
""", unsafe_allow_html=True)

if 'history' not in st.session_state:
    st.session_state.history = []
if 'saved_sessions' not in st.session_state:
    st.session_state.saved_sessions = {}

def save_to_history(operation, result, details=""):
    st.session_state.history.append({
        'time': datetime.now().strftime("%H:%M:%S"),
        'operation': operation,
        'result': result,
        'details': details
    })

def export_session():
    session_data = {
        'timestamp': datetime.now().isoformat(),
        'history': st.session_state.history
    }
    return json.dumps(session_data, indent=2, ensure_ascii=False)

def download_link(data, filename, text):
    b64 = base64.b64encode(data.encode()).decode()
    return f'<a href="data:application/json;base64,{b64}" download="{filename}">{text}</a>'

def parse_matrix_row(row_str, expected_cols=None):
    try:
        values = [float(x.strip()) for x in row_str.split()]
        if expected_cols is not None and len(values) != expected_cols:
            raise ValueError(f"–û–∂–∏–¥–∞–µ—Ç—Å—è {expected_cols} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(values)}")
        return values
    except ValueError as e:
        if "could not convert" in str(e):
            raise ValueError("–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        raise

def parse_vector(vec_str):
    try:
        values = [float(x.strip()) for x in vec_str.split()]
        if len(values) == 0:
            raise ValueError("–í–µ–∫—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return np.array(values)
    except ValueError as e:
        if "could not convert" in str(e):
            raise ValueError("–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–µ–∫—Ç–æ—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        raise

def parse_number_list(data_str):
    try:
        values = [float(x.strip()) for x in data_str.replace(',', ' ').split()]
        if len(values) == 0:
            raise ValueError("–°–ø–∏—Å–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return np.array(values)
    except ValueError as e:
        if "could not convert" in str(e):
            raise ValueError("–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
        raise

col1, col2 = st.columns([3, 1])
with col1:
    st.title("üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
st.markdown("---")

with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    graph_theme = st.selectbox(
        "–¢–µ–º–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤",
        ["plotly", "plotly_white", "plotly_dark", "none"]
    )
    st.markdown("---")
    st.subheader("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤")
    line_width = st.slider("–¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π", 1, 5, 2)
    grid_alpha = st.slider("–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Å–µ—Ç–∫–∏", 0.0, 1.0, 0.3)
    st.markdown("---")
    st.subheader("üìä –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π")
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
        st.session_state.history = []
        st.rerun()
    if st.button("–≠–∫—Å–ø–æ—Ä—Ç —Å–µ—Å—Å–∏–∏"):
        session_json = export_session()
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å JSON",
            data=session_json,
            file_name=f"math_session_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            mime="application/json")
    if st.session_state.history:
        st.markdown("**–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π:**")
        for item in reversed(st.session_state.history[-5:]):
            with st.expander(f"{item['time']} - {item['operation'][:30]}..."):
                st.write(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {item['result']}")
                if item['details']:
                    st.write(f"**–î–µ—Ç–∞–ª–∏:** {item['details']}")

tabs = st.tabs([
    "üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", "üìà –ì—Ä–∞—Ñ–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π", "üé≤ –ú–∞—Ç—Ä–∏—Ü—ã", "üî∫ –í–µ–∫—Ç–æ—Ä—ã",
    "üåê 3D –ì—Ä–∞—Ñ–∏–∫–∏", "üîß –°–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π", "‚ôæÔ∏è –°–∏–º–≤–æ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
    "‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "üß© –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è"
])

with tabs[0]:
    st.header("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—ã—Ä–∞–∂–µ–Ω–∏–π")
    col1, col2 = st.columns([3, 1])
    with col1:
        expression = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ",
            placeholder="–ü—Ä–∏–º–µ—Ä: sin(pi/2) + sqrt(16) * e**2",
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: sin, cos, tan, exp, log, sqrt, pi, e –∏ –¥—Ä—É–≥–∏–µ"
        )
    with col2:
        precision = st.slider("–¢–æ—á–Ω–æ—Å—Ç—å", 2, 15, 6)
    if expression:
        try:
            x = sp.Symbol('x')
            expr = sp.sympify(expression)
            if expr.free_symbols:
                st.warning("–í—ã—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É '–ì—Ä–∞—Ñ–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π'")
            else:
                result = float(expr.evalf())
                st.success(f"### –†–µ–∑—É–ª—å—Ç–∞—Ç: `{result:.{precision}f}`")
                st.markdown("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                col_a, col_b, col_c = st.columns(3)
                with col_a:
                    st.metric("–ù–∞—É—á–Ω–∞—è –Ω–æ—Ç–∞—Ü–∏—è", f"{result:.{precision}e}")
                with col_b:
                    st.metric("–û–∫—Ä—É–≥–ª–µ–Ω–æ", f"{round(result, precision)}")
                with col_c:
                    try:
                        frac = sp.nsimplify(expr, rational=True)
                        st.metric("–î—Ä–æ–±—å", str(frac))
                    except:
                        st.metric("–î—Ä–æ–±—å", "N/A")
                save_to_history(expression, f"{result:.{precision}f}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    st.markdown("---")
    st.subheader("–ë—ã—Å—Ç—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.markdown("**–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è**")
        angle = st.number_input("–£–≥–æ–ª (–≥—Ä–∞–¥—É—Å—ã)", value=45.0)
        if st.button("–í—ã—á–∏—Å–ª–∏—Ç—å sin/cos/tan"):
            rad = np.radians(angle)
            st.write(f"sin({angle}¬∞) = {np.sin(rad):.6f}")
            st.write(f"cos({angle}¬∞) = {np.cos(rad):.6f}")
            st.write(f"tan({angle}¬∞) = {np.tan(rad):.6f}")
    
    with col2:
        st.markdown("**–õ–æ–≥–∞—Ä–∏—Ñ–º—ã**")
        log_val = st.number_input("–ß–∏—Å–ª–æ", value=100.0, min_value=0.01)
        if st.button("–í—ã—á–∏—Å–ª–∏—Ç—å –ª–æ–≥–∞—Ä–∏—Ñ–º—ã"):
            st.write(f"ln({log_val}) = {np.log(log_val):.6f}")
            st.write(f"log10({log_val}) = {np.log10(log_val):.6f}")
            st.write(f"log2({log_val}) = {np.log2(log_val):.6f}")
    
    with col3:
        st.markdown("**–ö–æ–º–±–∏–Ω–∞—Ç–æ—Ä–∏–∫–∞**")
        n = st.number_input("n", value=10, min_value=0, step=1)
        k = st.number_input("k", value=3, min_value=0, step=1)
        if st.button("–í—ã—á–∏—Å–ª–∏—Ç—å C(n,k) –∏ P(n,k)"):
            from math import comb, perm
            st.write(f"C({n},{k}) = {comb(n, k)}")
            st.write(f"P({n},{k}) = {perm(n, k)}")
    
    with col4:
        st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**")
        data_input = st.text_input("–î–∞–Ω–Ω—ã–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", "1,2,3,4,5")
        if st.button("–ê–Ω–∞–ª–∏–∑"):
            try:
                data = [float(x.strip()) for x in data_input.split(',')]
                st.write(f"–°—Ä–µ–¥–Ω–µ–µ: {np.mean(data):.4f}")
                st.write(f"–ú–µ–¥–∏–∞–Ω–∞: {np.median(data):.4f}")
                st.write(f"–°—Ç. –æ—Ç–∫–ª: {np.std(data):.4f}")
            except:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    with col5:
        st.markdown("**–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞**")
        numbers_input = st.text_input("–¶–µ–ª—ã–µ —á–∏—Å–ª–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", "12, 18, 24")
        if st.button("–ù–û–î / –ù–û–ö"):
            try:
                nums = [int(float(x.strip())) for x in numbers_input.split(',')]
                if any(n <= 0 for n in nums):
                    st.warning("–ù–û–î/–ù–û–ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—ã—Ö")
                else:
                    gcd_val = nums[0]
                    for n in nums[1:]:
                        gcd_val = math.gcd(gcd_val, n)
                    lcm_val = abs(nums[0] * nums[1]) // math.gcd(nums[0], nums[1])
                    for n in nums[2:]:
                        lcm_val = abs(lcm_val * n) // math.gcd(lcm_val, n)
                    st.write(f"**–ù–û–î**: {gcd_val}")
                    st.write(f"**–ù–û–ö**: {lcm_val}")
                    
                    def is_prime(n):
                        if n < 2:
                            return False
                        for i in range(2, int(n**0.5)+1):
                            if n % i == 0:
                                return False
                        return True
                    
                    def prime_factors(n):
                        i = 2
                        factors = []
                        while i * i <= n:
                            while n % i == 0:
                                factors.append(i)
                                n //= i
                            i += 1
                        if n > 1:
                            factors.append(n)
                        return factors
                    
                    n0 = nums[0]
                    st.write(f"**{n0} ‚Äî {'–ø—Ä–æ—Å—Ç–æ–µ' if is_prime(n0) else '—Å–æ—Å—Ç–∞–≤–Ω–æ–µ'}**")
                    st.write(f"–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ: {' √ó '.join(map(str, prime_factors(n0)))}")
                    
                    st.write(f"–î–≤–æ–∏—á–Ω–∞—è: {bin(n0)}")
                    st.write(f"–í–æ—Å—å–º–µ—Ä–∏—á–Ω–∞—è: {oct(n0)}")
                    st.write(f"–®–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–∞—è: {hex(n0)}")
                    
                    st.toast("–ê—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∞!", icon="‚úÖ")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞. {str(e)}")

with tabs[1]:
    st.header("–ì—Ä–∞—Ñ–∏–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π")

    col1, col2 = st.columns([2, 1])

    with col1:
        func_expr = st.text_input("–§—É–Ω–∫—Ü–∏—è f(x)",
                                  value="sin(x) + cos(2*x)",
                                  help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ x –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é")

    with col2:
        graph_type = st.selectbox(
            "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞",
            ["–û–±—ã—á–Ω—ã–π", "–° –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π", "–° –∏–Ω—Ç–µ–≥—Ä–∞–ª–æ–º", "–í—Å–µ –≤–º–µ—Å—Ç–µ"])

    col_a, col_b, col_c = st.columns(3)
    with col_a:
        x_min = st.number_input("x min", value=-10.0)
    with col_b:
        x_max = st.number_input("x max", value=10.0)
    with col_c:
        points = st.slider("–¢–æ—á–µ–∫", 100, 2000, 500)

    if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", type="primary"):
        try:
            x_sym = sp.Symbol('x')
            expr = sp.sympify(func_expr)
            f_lambda = sp.lambdify(x_sym, expr, 'numpy')

            x_vals = np.linspace(x_min, x_max, points)
            y_vals = f_lambda(x_vals)

            fig = go.Figure()

            fig.add_trace(
                go.Scatter(x=x_vals,
                           y=y_vals,
                           mode='lines',
                           name=f'f(x) = {func_expr}',
                           line=dict(width=2, color='blue')))

            if graph_type in ["–° –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π", "–í—Å–µ –≤–º–µ—Å—Ç–µ"]:
                derivative = sp.diff(expr, x_sym)
                df_lambda = sp.lambdify(x_sym, derivative, 'numpy')
                dy_vals = df_lambda(x_vals)

                fig.add_trace(
                    go.Scatter(x=x_vals,
                               y=dy_vals,
                               mode='lines',
                               name=f"f'(x) = {derivative}",
                               line=dict(width=2, color='red', dash='dash')))

            if graph_type in ["–° –∏–Ω—Ç–µ–≥—Ä–∞–ª–æ–º", "–í—Å–µ –≤–º–µ—Å—Ç–µ"]:
                integral = sp.integrate(expr, x_sym)
                int_lambda = sp.lambdify(x_sym, integral, 'numpy')
                int_vals = int_lambda(x_vals)

                fig.add_trace(
                    go.Scatter(x=x_vals,
                               y=int_vals,
                               mode='lines',
                               name=f"‚à´f(x)dx = {integral}",
                               line=dict(width=2, color='green', dash='dot')))

            fig.update_layout(title=f"–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏: {func_expr}",
                              xaxis_title="x",
                              yaxis_title="y",
                              hovermode='x unified',
                              template=theme,
                              height=600)

            st.plotly_chart(fig, use_container_width=True)

            st.subheader("–ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏")
            col1, col2, col3 = st.columns(3)

            with col1:
                st.markdown("**–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è:**")
                derivative = sp.diff(expr, x_sym)
                st.latex(sp.latex(derivative))

            with col2:
                st.markdown("**–ò–Ω—Ç–µ–≥—Ä–∞–ª:**")
                integral = sp.integrate(expr, x_sym)
                st.latex(sp.latex(integral))

            with col3:
                st.markdown("**–ü—Ä–µ–¥–µ–ª –ø—Ä–∏ x‚Üí‚àû:**")
                try:
                    limit = sp.limit(expr, x_sym, sp.oo)
                    st.latex(sp.latex(limit))
                except:
                    st.write("–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

            save_to_history(f"–ì—Ä–∞—Ñ–∏–∫: {func_expr}", "–£—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω")

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

    st.markdown("---")
    st.subheader("–ù–∞–π—Ç–∏ –∫–æ—Ä–Ω–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏—è")

    col1, col2 = st.columns(2)
    with col1:
        root_expr = st.text_input("–£—Ä–∞–≤–Ω–µ–Ω–∏–µ (= 0)", value="x**2 - 4")
    with col2:
        root_range = st.slider("–î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞", -100.0, 100.0, (-10.0, 10.0))

    if st.button("–ù–∞–π—Ç–∏ –∫–æ—Ä–Ω–∏"):
        try:
            x_sym = sp.Symbol('x')
            expr = sp.sympify(root_expr)
            f_lambda = sp.lambdify(x_sym, expr, 'numpy')

            roots = []
            for x0 in np.linspace(root_range[0], root_range[1], 20):
                try:
                    root = optimize.fsolve(f_lambda, x0)[0]
                    if root_range[0] <= root <= root_range[1]:
                        if not any(abs(root - r) < 0.01 for r in roots):
                            if abs(f_lambda(root)) < 0.001:
                                roots.append(root)
                except:
                    pass

            if roots:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ—Ä–Ω–µ–π: {len(roots)}")
                for i, root in enumerate(sorted(roots), 1):
                    st.write(f"x_{i} = {root:.6f}")
            else:
                st.warning("–ö–æ—Ä–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

with tabs[2]:
    st.header("–ú–∞—Ç—Ä–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")

    operation = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é", [
        "–°–ª–æ–∂–µ–Ω–∏–µ/–í—ã—á–∏—Ç–∞–Ω–∏–µ", "–£–º–Ω–æ–∂–µ–Ω–∏–µ", "–ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ", 
        "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å", "–û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞", "–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å",
        "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", "LU-—Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ", "QR-—Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ", "SVD"
    ])

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ A")
        rows_a = st.number_input("–°—Ç—Ä–æ–∫ A", 2, 10, 3, key="rows_a")
        cols_a = st.number_input("–°—Ç–æ–ª–±—Ü–æ–≤ A", 2, 10, 3, key="cols_a")

        matrix_a_data = []
        matrix_a_valid = True
        for i in range(rows_a):
            row = st.text_input(
                f"–°—Ç—Ä–æ–∫–∞ {i+1} (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)",
                value=" ".join(["1" if j == i else "0"
                                for j in range(cols_a)]),
                key=f"a_{i}")
            try:
                matrix_a_data.append(parse_matrix_row(row, cols_a))
            except ValueError as e:
                st.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i+1}: {str(e)}")
                matrix_a_valid = False
                break

        if matrix_a_valid and matrix_a_data:
            matrix_a = np.array(matrix_a_data)
            st.write("**–ú–∞—Ç—Ä–∏—Ü–∞ A:**")
            st.dataframe(pd.DataFrame(matrix_a))
        else:
            matrix_a = None

    with col2:
        if operation in ["–°–ª–æ–∂–µ–Ω–∏–µ/–í—ã—á–∏—Ç–∞–Ω–∏–µ", "–£–º–Ω–æ–∂–µ–Ω–∏–µ", "–ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ"]:
            st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ B")
            rows_b = st.number_input("–°—Ç—Ä–æ–∫ B", 2, 10, 3, key="rows_b")
            cols_b = st.number_input("–°—Ç–æ–ª–±—Ü–æ–≤ B", 2, 10, 3, key="cols_b")

            matrix_b_data = []
            matrix_b_valid = True
            for i in range(rows_b):
                row = st.text_input(f"–°—Ç—Ä–æ–∫–∞ {i+1} (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)",
                                    value=" ".join([
                                        "2" if j == i else "0"
                                        for j in range(cols_b)
                                    ]),
                                    key=f"b_{i}")
                try:
                    matrix_b_data.append(parse_matrix_row(row, cols_b))
                except ValueError as e:
                    st.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i+1}: {str(e)}")
                    matrix_b_valid = False
                    break

            if matrix_b_valid and matrix_b_data:
                matrix_b = np.array(matrix_b_data)
                st.write("**–ú–∞—Ç—Ä–∏—Ü–∞ B:**")
                st.dataframe(pd.DataFrame(matrix_b))
            else:
                matrix_b = None
        else:
            matrix_b = None

    if operation == "–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å":
        power = st.number_input("–°—Ç–µ–ø–µ–Ω—å", value=2, min_value=1, max_value=10)

    if st.button("–í—ã—á–∏—Å–ª–∏—Ç—å", type="primary"):
        if matrix_a is None:
            st.error("–û—à–∏–±–∫–∞ –≤ –º–∞—Ç—Ä–∏—Ü–µ A. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        elif operation in ["–°–ª–æ–∂–µ–Ω–∏–µ/–í—ã—á–∏—Ç–∞–Ω–∏–µ", "–£–º–Ω–æ–∂–µ–Ω–∏–µ", "–ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ"] and matrix_b is None:
            st.error("–û—à–∏–±–∫–∞ –≤ –º–∞—Ç—Ä–∏—Ü–µ B. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        else:
            try:
                if operation == "–°–ª–æ–∂–µ–Ω–∏–µ/–í—ã—á–∏—Ç–∞–Ω–∏–µ":
                    op = st.radio("–û–ø–µ—Ä–∞—Ü–∏—è", ["–°–ª–æ–∂–µ–Ω–∏–µ", "–í—ã—á–∏—Ç–∞–Ω–∏–µ"],
                                  horizontal=True)
                    if matrix_a.shape == matrix_b.shape:
                        result = matrix_a + matrix_b if op == "–°–ª–æ–∂–µ–Ω–∏–µ" else matrix_a - matrix_b
                        st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç ({op}):")
                        st.dataframe(pd.DataFrame(result))
                    else:
                        st.error("–†–∞–∑–º–µ—Ä—ã –º–∞—Ç—Ä–∏—Ü –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å")

                elif operation == "–£–º–Ω–æ–∂–µ–Ω–∏–µ":
                    if matrix_a.shape[1] == matrix_b.shape[0]:
                        result = matrix_a @ matrix_b
                        st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç (A √ó B):")
                        st.dataframe(pd.DataFrame(result))
                    else:
                        st.error(
                            "–ß–∏—Å–ª–æ —Å—Ç–æ–ª–±—Ü–æ–≤ A –¥–æ–ª–∂–Ω–æ —Ä–∞–≤–Ω—è—Ç—å—Å—è —á–∏—Å–ª—É —Å—Ç—Ä–æ–∫ B")

                elif operation == "–ü–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ":
                    if matrix_a.shape == matrix_b.shape:
                        result = matrix_a * matrix_b
                        st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ A ‚äô B):")
                        st.dataframe(pd.DataFrame(result))
                    else:
                        st.error("–†–∞–∑–º–µ—Ä—ã –º–∞—Ç—Ä–∏—Ü –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å")

                elif operation == "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å":
                    if matrix_a.shape[0] == matrix_a.shape[1]:
                        det = linalg.det(matrix_a)
                        st.success(f"–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å: **{det:.6f}**")
                        save_to_history("–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –º–∞—Ç—Ä–∏—Ü—ã", f"{det:.6f}")
                    else:
                        st.error("–ú–∞—Ç—Ä–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π")

                elif operation == "–û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞":
                    if matrix_a.shape[0] == matrix_a.shape[1]:
                        try:
                            inv = linalg.inv(matrix_a)
                            st.success("–û–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:")
                            st.dataframe(pd.DataFrame(inv))

                            verification = matrix_a @ inv
                            st.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ (A √ó A‚Åª¬π):")
                            st.dataframe(pd.DataFrame(verification))
                        except:
                            st.error("–ú–∞—Ç—Ä–∏—Ü–∞ –≤—ã—Ä–æ–∂–¥–µ–Ω–Ω–∞—è (–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å = 0)")
                    else:
                        st.error("–ú–∞—Ç—Ä–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π")

                elif operation == "–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å":
                    if matrix_a.shape[0] == matrix_a.shape[1]:
                        result = np.linalg.matrix_power(matrix_a, power)
                        st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç (A^{power}):")
                        st.dataframe(pd.DataFrame(result))
                    else:
                        st.error("–ú–∞—Ç—Ä–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π")

                elif operation == "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è":
                    if matrix_a.shape[0] == matrix_a.shape[1]:
                        eigenvalues, eigenvectors = linalg.eig(matrix_a)

                        st.success("–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
                        for i, val in enumerate(eigenvalues):
                            if np.isreal(val):
                                st.write(f"Œª_{i+1} = {val.real:.6f}")
                            else:
                                st.write(f"Œª_{i+1} = {val:.6f}")

                        st.info("–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã:")
                        st.dataframe(pd.DataFrame(eigenvectors.real))
                    else:
                        st.error("–ú–∞—Ç—Ä–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π")

                elif operation == "LU-—Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ":
                    if matrix_a.shape[0] == matrix_a.shape[1]:
                        P, L, U = linalg.lu(matrix_a)

                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.write("**–ú–∞—Ç—Ä–∏—Ü–∞ P:**")
                            st.dataframe(pd.DataFrame(P))
                        with col2:
                            st.write("**–ú–∞—Ç—Ä–∏—Ü–∞ L:**")
                            st.dataframe(pd.DataFrame(L))
                        with col3:
                            st.write("**–ú–∞—Ç—Ä–∏—Ü–∞ U:**")
                            st.dataframe(pd.DataFrame(U))
                    else:
                        st.error("–ú–∞—Ç—Ä–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π")

                elif operation == "QR-—Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ":
                    Q, R = linalg.qr(matrix_a)

                    col1, col2 = st.columns(2)
                    with col1:
                        st.write("**–ú–∞—Ç—Ä–∏—Ü–∞ Q (–æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–∞—è):**")
                        st.dataframe(pd.DataFrame(Q))
                    with col2:
                        st.write("**–ú–∞—Ç—Ä–∏—Ü–∞ R (–≤–µ—Ä—Ö–Ω–µ—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∞—è):**")
                        st.dataframe(pd.DataFrame(R))

                elif operation == "SVD":
                    U, s, Vt = linalg.svd(matrix_a)

                    st.success("–°–∏–Ω–≥—É–ª—è—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
                    st.write(s)

                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.write("**–ú–∞—Ç—Ä–∏—Ü–∞ U:**")
                        st.dataframe(pd.DataFrame(U))
                    with col2:
                        st.write("**–°–∏–Ω–≥—É–ª—è—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è Œ£:**")
                        st.dataframe(pd.DataFrame(np.diag(s)))
                    with col3:
                        st.write("**–ú–∞—Ç—Ä–∏—Ü–∞ V^T:**")
                        st.dataframe(pd.DataFrame(Vt))

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

with tabs[3]:
    st.header("–í–µ–∫—Ç–æ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")

    col1, col2 = st.columns(2)

    with col1:
        st.subheader("–í–µ–∫—Ç–æ—Ä A")
        dim = st.number_input("–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å", 2, 10, 3)
        vec_a_input = st.text_input("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã A (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)", "1 2 3")
        try:
            vec_a = parse_vector(vec_a_input)
        except ValueError as e:
            st.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–∫—Ç–æ—Ä–µ A: {str(e)}")
            vec_a = None

    with col2:
        st.subheader("–í–µ–∫—Ç–æ—Ä B")
        vec_b_input = st.text_input("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã B (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)", "4 5 6")
        try:
            vec_b = parse_vector(vec_b_input)
        except ValueError as e:
            st.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–∫—Ç–æ—Ä–µ B: {str(e)}")
            vec_b = None

    if st.button("–í—ã—á–∏—Å–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏", type="primary"):
        if vec_a is None or vec_b is None:
            st.error("–û—à–∏–±–∫–∞ –≤ –≤–µ–∫—Ç–æ—Ä–∞—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        elif len(vec_a) != len(vec_b):
            st.error(
                f"–í–µ–∫—Ç–æ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏. A: {len(vec_a)}, B: {len(vec_b)}"
            )
        else:
            try:
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã")

                col1, col2, col3 = st.columns(3)

                with col1:
                    st.metric("–°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ",
                              f"{np.dot(vec_a, vec_b):.6f}")
                    st.metric("–î–ª–∏–Ω–∞ –≤–µ–∫—Ç–æ—Ä–∞ A",
                              f"{np.linalg.norm(vec_a):.6f}")
                    st.metric("–î–ª–∏–Ω–∞ –≤–µ–∫—Ç–æ—Ä–∞ B",
                              f"{np.linalg.norm(vec_b):.6f}")

                with col2:
                    angle = np.arccos(
                        np.dot(vec_a, vec_b) /
                        (np.linalg.norm(vec_a) * np.linalg.norm(vec_b)))
                    st.metric("–£–≥–æ–ª –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏ (—Ä–∞–¥)", f"{angle:.6f}")
                    st.metric("–£–≥–æ–ª –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏ (–≥—Ä–∞–¥)",
                              f"{np.degrees(angle):.6f}")

                    if len(vec_a) == 3 and len(vec_b) == 3:
                        cross = np.cross(vec_a, vec_b)
                        st.metric(
                            "–í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ",
                            f"[{cross[0]:.2f}, {cross[1]:.2f}, {cross[2]:.2f}]"
                        )

                with col3:
                    st.write("**A + B:**", vec_a + vec_b)
                    st.write("**A - B:**", vec_a - vec_b)
                    proj = (np.dot(vec_a, vec_b) /
                            np.dot(vec_b, vec_b)) * vec_b
                    st.write("**–ü—Ä–æ–µ–∫—Ü–∏—è A –Ω–∞ B:**", proj)

                if len(vec_a) == 3 and len(vec_b) == 3:
                    fig = go.Figure()

                    origin = [0, 0, 0]
                    fig.add_trace(
                        go.Scatter3d(x=[origin[0], vec_a[0]],
                                     y=[origin[1], vec_a[1]],
                                     z=[origin[2], vec_a[2]],
                                     mode='lines+markers',
                                     name='–í–µ–∫—Ç–æ—Ä A',
                                     line=dict(color='blue', width=5),
                                     marker=dict(size=8)))

                    fig.add_trace(
                        go.Scatter3d(x=[origin[0], vec_b[0]],
                                     y=[origin[1], vec_b[1]],
                                     z=[origin[2], vec_b[2]],
                                     mode='lines+markers',
                                     name='–í–µ–∫—Ç–æ—Ä B',
                                     line=dict(color='red', width=5),
                                     marker=dict(size=8)))

                    cross = np.cross(vec_a, vec_b)
                    fig.add_trace(
                        go.Scatter3d(x=[origin[0], cross[0]],
                                     y=[origin[1], cross[1]],
                                     z=[origin[2], cross[2]],
                                     mode='lines+markers',
                                     name='A √ó B',
                                     line=dict(color='green',
                                               width=5,
                                               dash='dash'),
                                     marker=dict(size=8)))

                    fig.update_layout(title="3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤",
                                      scene=dict(xaxis_title='X',
                                                 yaxis_title='Y',
                                                 zaxis_title='Z'),
                                      template=graph_theme,
                                      height=600)

                    st.plotly_chart(fig, use_container_width=True)

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

with tabs[4]:
    st.header("3D –ì—Ä–∞—Ñ–∏–∫–∏")

    graph_3d_type = st.selectbox(
        "–¢–∏–ø 3D –≥—Ä–∞—Ñ–∏–∫–∞",
        ["–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å z=f(x,y)", "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∫—Ä–∏–≤–∞—è", "–í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª–µ"])

    if graph_3d_type == "–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å z=f(x,y)":
        func_3d = st.text_input("–§—É–Ω–∫—Ü–∏—è z = f(x, y)",
                                value="sin(sqrt(x**2 + y**2))",
                                help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ x –∏ y –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            x_min_3d = st.number_input("x min", value=-5.0, key="x_min_3d")
        with col2:
            x_max_3d = st.number_input("x max", value=5.0, key="x_max_3d")
        with col3:
            y_min_3d = st.number_input("y min", value=-5.0, key="y_min_3d")
        with col4:
            y_max_3d = st.number_input("y max", value=5.0, key="y_max_3d")

        points_3d = st.slider("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ", 20, 200, 50)

        if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å 3D –≥—Ä–∞—Ñ–∏–∫", type="primary"):
            try:
                x_sym, y_sym = sp.symbols('x y')
                expr = sp.sympify(func_3d)
                f_lambda = sp.lambdify((x_sym, y_sym), expr, 'numpy')

                x = np.linspace(x_min_3d, x_max_3d, points_3d)
                y = np.linspace(y_min_3d, y_max_3d, points_3d)
                X, Y = np.meshgrid(x, y)
                Z = f_lambda(X, Y)

                fig = go.Figure(
                    data=[go.Surface(x=X, y=Y, z=Z, colorscale='Viridis')])

                fig.update_layout(title=f"3D –ì—Ä–∞—Ñ–∏–∫: z = {func_3d}",
                                  scene=dict(xaxis_title='X',
                                             yaxis_title='Y',
                                             zaxis_title='Z'),
                                  template=graph_theme,
                                  height=700)

                st.plotly_chart(fig, use_container_width=True)
                save_to_history(f"3D –≥—Ä–∞—Ñ–∏–∫: {func_3d}", "–£—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω")

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

    elif graph_3d_type == "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∫—Ä–∏–≤–∞—è":
        st.write("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è:")
        col1, col2, col3 = st.columns(3)
        with col1:
            x_param = st.text_input("x(t)", value="cos(t)")
        with col2:
            y_param = st.text_input("y(t)", value="sin(t)")
        with col3:
            z_param = st.text_input("z(t)", value="t")

        col_a, col_b, col_c = st.columns(3)
        with col_a:
            t_min = st.number_input("t min", value=0.0)
        with col_b:
            t_max = st.number_input("t max", value=10.0)
        with col_c:
            t_points = st.slider("–¢–æ—á–µ–∫", 50, 1000, 200)

        if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫—Ä–∏–≤—É—é", type="primary"):
            try:
                t_sym = sp.Symbol('t')
                x_expr = sp.sympify(x_param)
                y_expr = sp.sympify(y_param)
                z_expr = sp.sympify(z_param)

                x_lambda = sp.lambdify(t_sym, x_expr, 'numpy')
                y_lambda = sp.lambdify(t_sym, y_expr, 'numpy')
                z_lambda = sp.lambdify(t_sym, z_expr, 'numpy')

                t = np.linspace(t_min, t_max, t_points)
                x_vals = x_lambda(t)
                y_vals = y_lambda(t)
                z_vals = z_lambda(t)

                fig = go.Figure(data=[
                    go.Scatter3d(x=x_vals,
                                 y=y_vals,
                                 z=z_vals,
                                 mode='lines',
                                 line=dict(
                                     color=t, colorscale='Rainbow', width=5))
                ])

                fig.update_layout(title="–ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∫—Ä–∏–≤–∞—è",
                                  scene=dict(xaxis_title='X',
                                             yaxis_title='Y',
                                             zaxis_title='Z'),
                                  template=graph_theme,
                                  height=700)

                st.plotly_chart(fig, use_container_width=True)

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

    elif graph_3d_type == "–í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª–µ":
        st.subheader("–í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª–µ F(x,y) = [P(x,y), Q(x,y)]")
        
        col1, col2 = st.columns(2)
        with col1:
            p_func = st.text_input("P(x,y) - x-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞", 
                                 value="-y",
                                 help="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ –æ—Å–∏ X")
        with col2:
            q_func = st.text_input("Q(x,y) - y-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞", 
                                 value="x",
                                 help="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ –æ—Å–∏ Y")

        col_a, col_b, col_c, col_d = st.columns(4)
        with col_a:
            vf_x_min = st.number_input("x min", value=-2.0, key="vf_x_min")
        with col_b:
            vf_x_max = st.number_input("x max", value=2.0, key="vf_x_max")
        with col_c:
            vf_y_min = st.number_input("y min", value=-2.0, key="vf_y_min")
        with col_d:
            vf_y_max = st.number_input("y max", value=2.0, key="vf_y_max")

        vf_points = st.slider("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Å–µ—Ç–∫–∏", 5, 30, 15)
        arrow_scale = st.slider("–ú–∞—Å—à—Ç–∞–± —Å—Ç—Ä–µ–ª–æ–∫", 0.1, 2.0, 0.5)

        if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª–µ", type="primary"):
            try:
                x_sym, y_sym = sp.symbols('x y')
                
                p_expr = sp.sympify(p_func)
                q_expr = sp.sympify(q_func)
                
                p_lambda = sp.lambdify((x_sym, y_sym), p_expr, 'numpy')
                q_lambda = sp.lambdify((x_sym, y_sym), q_expr, 'numpy')

                x = np.linspace(vf_x_min, vf_x_max, vf_points)
                y = np.linspace(vf_y_min, vf_y_max, vf_points)
                X, Y = np.meshgrid(x, y)
                
                U = p_lambda(X, Y)
                V = q_lambda(X, Y)
                
                magnitude = np.sqrt(U**2 + V**2)
                U_norm = U / (magnitude + 1e-8) * arrow_scale
                V_norm = V / (magnitude + 1e-8) * arrow_scale

                fig = go.Figure()

                fig.add_trace(go.Cone(
                    x=X.flatten(),
                    y=Y.flatten(),
                    z=np.zeros_like(X.flatten()),
                    u=U.flatten(),
                    v=V.flatten(),
                    w=np.zeros_like(U.flatten()),
                    colorscale='Blues',
                    sizemode="absolute",
                    sizeref=arrow_scale,
                    showscale=False
                ))

                fig.add_trace(go.Scatter(
                    x=X.flatten(),
                    y=Y.flatten(),
                    mode='markers',
                    marker=dict(
                        size=2,
                        color=magnitude.flatten(),
                        colorscale='Viridis',
                        showscale=True
                    ),
                    name='–ú–∞–≥–Ω–∏—Ç—É–¥–∞'
                ))

                fig.update_layout(
                    title=f"–í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª–µ: F(x,y) = [{p_func}, {q_func}]",
                    scene=dict(
                        xaxis_title='X',
                        yaxis_title='Y', 
                        zaxis_title='',
                        aspectmode='data'
                    ),
                    template=graph_theme,
                    height=700
                )

                st.plotly_chart(fig, use_container_width=True)
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–∞–≥–Ω–∏—Ç—É–¥–∞", f"{np.max(magnitude):.4f}")
                with col2:
                    st.metric("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –º–∞–≥–Ω–∏—Ç—É–¥–∞", f"{np.min(magnitude):.4f}")
                with col3:
                    divergence = sp.diff(p_expr, x_sym) + sp.diff(q_expr, y_sym)
                    st.metric("–î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è", f"{sp.latex(divergence)}")
                
                save_to_history(f"–í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø–æ–ª–µ: [{p_func}, {q_func}]", "–£—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ")

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

with tabs[5]:
    st.header("–°–∏—Å—Ç–µ–º—ã –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π")

    st.markdown("–†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–∞ **Ax = b**")

    n_equations = st.number_input("–ß–∏—Å–ª–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–π/–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö", 2, 10, 3)

    st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ A")
    A_data = []
    for i in range(n_equations):
        row = st.text_input(f"–£—Ä–∞–≤–Ω–µ–Ω–∏–µ {i+1} (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)",
                            value=" ".join([
                                str(j + 1) if j == i else "1"
                                for j in range(n_equations)
                            ]),
                            key=f"eq_{i}")
        A_data.append([float(x) for x in row.split()])

    A = np.array(A_data)

    st.subheader("–í–µ–∫—Ç–æ—Ä —Å–≤–æ–±–æ–¥–Ω—ã—Ö —á–ª–µ–Ω–æ–≤ b")
    b_input = st.text_input("–°–≤–æ–±–æ–¥–Ω—ã–µ —á–ª–µ–Ω—ã (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)",
                            " ".join(["1"] * n_equations))
    b = np.array([float(x) for x in b_input.split()])

    if st.button("–†–µ—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É", type="primary"):
        try:
            st.write("**–ú–∞—Ç—Ä–∏—Ü–∞ A:**")
            st.dataframe(pd.DataFrame(A))
            st.write("**–í–µ–∫—Ç–æ—Ä b:**", b)

            det = linalg.det(A)
            st.info(f"–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å –º–∞—Ç—Ä–∏—Ü—ã A: {det:.6f}")

            if abs(det) > 1e-10:
                x = linalg.solve(A, b)

                st.success("–†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:")
                for i, val in enumerate(x):
                    st.write(f"x_{i+1} = {val:.6f}")

                verification = A @ x
                st.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ (Ax):")
                st.write(verification)
                st.write("–û–∂–∏–¥–∞–ª–æ—Å—å (b):")
                st.write(b)
                st.write("–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å:")
                st.write(np.abs(verification - b))

                save_to_history("–°–∏—Å—Ç–µ–º–∞ —É—Ä–∞–≤–Ω–µ–Ω–∏–π", f"–†–µ—à–µ–Ω–∏–µ: {x}")
            else:
                st.warning(
                    "–°–∏—Å—Ç–µ–º–∞ –≤—ã—Ä–æ–∂–¥–µ–Ω–Ω–∞—è –∏–ª–∏ –∏–º–µ–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –º–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏–π")
                st.write("–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤:")
                x, residuals, rank, s = linalg.lstsq(A, b)
                st.write("–ü—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:")
                for i, val in enumerate(x):
                    st.write(f"x_{i+1} = {val:.6f}")

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

with tabs[6]:
    st.header("–°–∏–º–≤–æ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")

    sym_operation = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é", [
        "–£–ø—Ä–æ—â–µ–Ω–∏–µ", "–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏", "–†–∞—Å–∫—Ä—ã—Ç–∏–µ —Å–∫–æ–±–æ–∫",
        "–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è", "–ò–Ω—Ç–µ–≥—Ä–∞–ª", "–ü—Ä–µ–¥–µ–ª", "–†—è–¥ –¢–µ–π–ª–æ—Ä–∞", "–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è"
    ])

    expr_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ",
                               value="(x**2 - 1)/(x - 1)" if sym_operation
                               == "–£–ø—Ä–æ—â–µ–Ω–∏–µ" else "x**2 + 2*x + 1",
                               help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å sympy")

    if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å", type="primary"):
        try:
            x = sp.Symbol('x')
            expr = sp.sympify(expr_input)

            if sym_operation == "–£–ø—Ä–æ—â–µ–Ω–∏–µ":
                result = sp.simplify(expr)
                st.success("–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:")
                st.latex(sp.latex(result))
                st.code(str(result))

            elif sym_operation == "–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏":
                result = sp.factor(expr)
                st.success("–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏:")
                st.latex(sp.latex(result))
                st.code(str(result))

            elif sym_operation == "–†–∞—Å–∫—Ä—ã—Ç–∏–µ —Å–∫–æ–±–æ–∫":
                result = sp.expand(expr)
                st.success("–†–∞—Å–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏:")
                st.latex(sp.latex(result))
                st.code(str(result))

            elif sym_operation == "–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è":
                order = st.number_input("–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π", 1, 5, 1)
                result = sp.diff(expr, x, order)
                st.success(f"–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –ø–æ—Ä—è–¥–∫–∞ {order}:")
                st.latex(sp.latex(result))
                st.code(str(result))

            elif sym_operation == "–ò–Ω—Ç–µ–≥—Ä–∞–ª":
                definite = st.checkbox("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª")
                if definite:
                    col1, col2 = st.columns(2)
                    with col1:
                        a = st.number_input("–ù–∏–∂–Ω–∏–π –ø—Ä–µ–¥–µ–ª", value=0.0)
                    with col2:
                        b = st.number_input("–í–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª", value=1.0)
                    result = sp.integrate(expr, (x, a, b))
                    st.success(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª –æ—Ç {a} –¥–æ {b}:")
                else:
                    result = sp.integrate(expr, x)
                    st.success("–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞–ª:")
                st.latex(sp.latex(result))
                st.code(str(result))

            elif sym_operation == "–ü—Ä–µ–¥–µ–ª":
                point = st.text_input("–¢–æ—á–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0, oo, -oo)",
                                      value="0")
                point_val = sp.oo if point == "oo" else (
                    -sp.oo if point == "-oo" else float(point))
                direction = st.selectbox("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", ["+", "-", "¬±"])

                if direction == "¬±":
                    result = sp.limit(expr, x, point_val)
                else:
                    result = sp.limit(expr, x, point_val, direction)

                st.success(f"–ü—Ä–µ–¥–µ–ª –ø—Ä–∏ x ‚Üí {point} ({direction}):")
                st.latex(sp.latex(result))
                st.code(str(result))

            elif sym_operation == "–†—è–¥ –¢–µ–π–ª–æ—Ä–∞":
                point = st.number_input("–¢–æ—á–∫–∞ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è", value=0.0)
                order = st.number_input("–ü–æ—Ä—è–¥–æ–∫", 1, 20, 5)
                result = sp.series(expr, x, point, order)
                st.success(f"–†—è–¥ –¢–µ–π–ª–æ—Ä–∞ –≤ —Ç–æ—á–∫–µ {point} –¥–æ –ø–æ—Ä—è–¥–∫–∞ {order}:")
                st.latex(sp.latex(result))
                st.code(str(result))

            elif sym_operation == "–†–µ—à–µ–Ω–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è":
                st.info("–†–µ—à–∞–µ–º —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: –≤—ã—Ä–∞–∂–µ–Ω–∏–µ = 0")
                solutions = sp.solve(expr, x)
                st.success(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–π: {len(solutions)}")
                for i, sol in enumerate(solutions, 1):
                    st.write(f"x_{i} =")
                    st.latex(sp.latex(sol))
                    st.code(str(sol))

            save_to_history(f"{sym_operation}: {expr_input}", str(result))

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

with tabs[7]:
    st.header("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π")
    opt_type = st.selectbox("–¢–∏–ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", [
        "–ú–∏–Ω–∏–º—É–º –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", "–ú–∏–Ω–∏–º—É–º –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏",
        "–ú–∏–Ω–∏–º—É–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏", "–ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫—Ä–∏–≤–æ–π"
    ])
    if opt_type == "–ú–∏–Ω–∏–º—É–º –æ–¥–Ω–æ–º–µ—Ä–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏":
        func_opt = st.text_input("–§—É–Ω–∫—Ü–∏—è f(x)", value="x**4 - 3*x**3 + 2")
        col1, col2 = st.columns(2)
        with col1:
            x_start = st.number_input("–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞", value=0.0)
        with col2:
            method_1d = st.selectbox("–ú–µ—Ç–æ–¥",
                                     ["BFGS", "Nelder-Mead", "Powell"])
        if st.button("–ù–∞–π—Ç–∏ –º–∏–Ω–∏–º—É–º", type="primary"):
            try:
                x_sym = sp.Symbol('x')
                expr = sp.sympify(func_opt)
                f_lambda = sp.lambdify(x_sym, expr, 'numpy')
                result = optimize.minimize(f_lambda, x_start, method=method_1d)
                st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
                st.write(f"**x_min = {result.x[0]:.6f}**")
                st.write(f"**f(x_min) = {result.fun:.6f}**")
                st.write(
                    f"**–ò—Ç–µ—Ä–∞—Ü–∏–π: {result.nit if hasattr(result, 'nit') else 'N/A'}**"
                )
                st.write(f"**–£—Å–ø–µ—Ö: {result.success}**")
                x_plot = np.linspace(result.x[0] - 5, result.x[0] + 5, 500)
                y_plot = f_lambda(x_plot)
                fig = go.Figure()
                fig.add_trace(
                    go.Scatter(x=x_plot, y=y_plot, mode='lines', name='f(x)'))
                fig.add_trace(
                    go.Scatter(x=[result.x[0]],
                               y=[result.fun],
                               mode='markers',
                               marker=dict(size=15, color='red'),
                               name='–ú–∏–Ω–∏–º—É–º'))
                fig.update_layout(title="–ì—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –º–∏–Ω–∏–º—É–º–æ–º",
                                  xaxis_title="x",
                                  yaxis_title="f(x)",
                                  template=graph_theme)
                st.plotly_chart(fig, use_container_width=True)
                save_to_history(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {func_opt}",
                                f"x_min={result.x[0]:.6f}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

    elif opt_type == "–ú–∏–Ω–∏–º—É–º –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏":
        st.subheader("–ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ f(x‚ÇÅ, x‚ÇÇ, ..., x‚Çô)")
        func_multi = st.text_input("–§—É–Ω–∫—Ü–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ x[0], x[1], ...)", value="x[0]**2 + x[1]**2")
        n_vars = st.number_input("–ß–∏—Å–ª–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö", min_value=2, max_value=5, value=2)
        initial_guess = st.text_input("–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", value="1, 1")
        method_multi = st.selectbox("–ú–µ—Ç–æ–¥", ["BFGS", "Nelder-Mead", "Powell", "CG"])

        if st.button("–ù–∞–π—Ç–∏ –º–∏–Ω–∏–º—É–º", type="primary"):
            try:
                def func(x):
                    allowed_names = {"x": x, "__builtins__": {}}
                    code = compile(func_multi, "<string>", "eval")
                    for name in code.co_names:
                        if name not in ["x"]:
                            raise ValueError("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é x (–Ω–∞–ø—Ä–∏–º–µ—Ä: x[0], x[1])")
                    return eval(code, allowed_names)

                x0 = np.array([float(v.strip()) for v in initial_guess.split(',')])
                if len(x0) != n_vars:
                    st.error(f"–û–∂–∏–¥–∞–ª–æ—Å—å {n_vars} –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {len(x0)}")
                else:
                    result = optimize.minimize(func, x0, method=method_multi)
                    st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
                    st.write(f"**x_min = [{', '.join(f'{v:.4f}' for v in result.x)}]**")
                    st.write(f"**f(x_min) = {result.fun:.6f}**")
                    st.write(f"**–£—Å–ø–µ—Ö: {result.success}**")
                    if n_vars == 2:
                        x1 = np.linspace(x0[0]-3, x0[0]+3, 100)
                        x2 = np.linspace(x0[1]-3, x0[1]+3, 100)
                        X1, X2 = np.meshgrid(x1, x2)
                        Z = np.zeros_like(X1)
                        for i in range(X1.shape[0]):
                            for j in range(X1.shape[1]):
                                Z[i, j] = func([X1[i, j], X2[i, j]])
                        fig = go.Figure(data=go.Contour(x=x1, y=x2, z=Z, colorscale='Viridis'))
                        fig.add_trace(go.Scatter(x=[result.x[0]], y=[result.x[1]],
                                                 mode='markers', marker=dict(size=12, color='red'),
                                                 name='–ú–∏–Ω–∏–º—É–º'))
                        fig.update_layout(title="–ö–æ–Ω—Ç—É—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏", template=graph_theme)
                        st.plotly_chart(fig, use_container_width=True)
                    save_to_history(f"–ú–Ω–æ–≥–æ–º–µ—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: {func_multi}", f"x_min={result.x}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

    elif opt_type == "–ú–∏–Ω–∏–º—É–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏":
        st.subheader("–ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (–Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞)")
        func_constr = st.text_input("–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è f(x[0], x[1])", value="x[0]**2 + x[1]**2")
        constr_type = st.radio("–¢–∏–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", ["–ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ (‚â•0)", "–†–∞–≤–µ–Ω—Å—Ç–≤–æ (=0)"])
        constr_expr = st.text_input("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ g(x) = ...", value="x[0] + x[1] - 1")
        x0_input = st.text_input("–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ", value="0.5, 0.5")

        if st.button("–†–µ—à–∏—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏", type="primary"):
            try:
                def objective(x):
                    allowed = {"x": x, "__builtins__": {}}
                    return eval(compile(func_constr, "<string>", "eval"), allowed)

                def constraint_func(x):
                    allowed = {"x": x, "__builtins__": {}}
                    return eval(compile(constr_expr, "<string>", "eval"), allowed)

                x0 = np.array([float(v.strip()) for v in x0_input.split(',')])
                if constr_type == "–ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ (‚â•0)":
                    constr = {"type": "ineq", "fun": constraint_func}
                else:
                    constr = {"type": "eq", "fun": constraint_func}

                result = optimize.minimize(objective, x0, constraints=constr, method='SLSQP')
                st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
                st.write(f"**x = [{', '.join(f'{v:.4f}' for v in result.x)}]**")
                st.write(f"**f(x) = {result.fun:.6f}**")
                st.write(f"**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {constraint_func(result.x):.6f}**")
                st.write(f"**–£—Å–ø–µ—Ö: {result.success}**")

                if len(x0) == 2:
                    x1 = np.linspace(-2, 2, 100)
                    x2 = np.linspace(-2, 2, 100)
                    X1, X2 = np.meshgrid(x1, x2)
                    Z_obj = np.zeros_like(X1)
                    Z_constr = np.zeros_like(X1)
                    for i in range(X1.shape[0]):
                        for j in range(X1.shape[1]):
                            pt = [X1[i, j], X2[i, j]]
                            Z_obj[i, j] = objective(pt)
                            Z_constr[i, j] = constraint_func(pt)

                    fig = go.Figure()
                    fig.add_trace(go.Contour(x=x1, y=x2, z=Z_obj, colorscale='Blues', showscale=True, name='f(x)'))
                    if constr_type == "–†–∞–≤–µ–Ω—Å—Ç–≤–æ (=0)":
                        fig.add_trace(go.Contour(x=x1, y=x2, z=Z_constr, contours=dict(coloring='lines', showlabels=True, start=0, end=0, size=0.1), line_width=2, showscale=False, name='g(x)=0'))
                    else:
                        fig.add_trace(go.Contour(x=x1, y=x2, z=Z_constr, contours=dict(coloring='lines', showlabels=True, start=0, end=0, size=0.1), line_width=2, showscale=False, name='g(x)‚â•0'))
                    fig.add_trace(go.Scatter(x=[result.x[0]], y=[result.x[1]], mode='markers', marker=dict(size=12, color='red'), name='–†–µ—à–µ–Ω–∏–µ'))
                    fig.update_layout(title="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏", template=graph_theme)
                    st.plotly_chart(fig, use_container_width=True)

                save_to_history(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏: {func_constr}", f"x={result.x}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

    elif opt_type == "–ü–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫—Ä–∏–≤–æ–π":
        st.subheader("–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–∏–Ω–æ–º–æ–º")
        data_points = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–∫–∏ (x,y) –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ",
                                   value="0,1\n1,2\n2,5\n3,10\n4,17\n5,26")
        degree = st.slider("–°—Ç–µ–ø–µ–Ω—å –ø–æ–ª–∏–Ω–æ–º–∞", 1, 10, 2)
        if st.button("–ü–æ–¥–æ–±—Ä–∞—Ç—å –∫—Ä–∏–≤—É—é", type="primary"):
            try:
                points = [
                    line.split(',') for line in data_points.strip().split('\n')
                ]
                x_data = np.array([float(p[0]) for p in points])
                y_data = np.array([float(p[1]) for p in points])
                coeffs = np.polyfit(x_data, y_data, degree)
                poly = np.poly1d(coeffs)
                x_smooth = np.linspace(x_data.min(), x_data.max(), 300)
                y_smooth = poly(x_smooth)
                fig = go.Figure()
                fig.add_trace(
                    go.Scatter(x=x_data,
                               y=y_data,
                               mode='markers',
                               marker=dict(size=10, color='blue'),
                               name='–î–∞–Ω–Ω—ã–µ'))
                fig.add_trace(
                    go.Scatter(x=x_smooth,
                               y=y_smooth,
                               mode='lines',
                               line=dict(color='red', width=2),
                               name=f'–ü–æ–ª–∏–Ω–æ–º —Å—Ç–µ–ø–µ–Ω–∏ {degree}'))
                fig.update_layout(title="–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
                                  xaxis_title="x",
                                  yaxis_title="y",
                                  template=graph_theme)
                st.plotly_chart(fig, use_container_width=True)
                st.success("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ–ª–∏–Ω–æ–º–∞:")
                st.code(str(poly))
                mse = np.mean((y_data - poly(x_data))**2)
                st.metric("–°—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞", f"{mse:.6f}")
                save_to_history(f"–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –ø–æ–ª–∏–Ω–æ–º–æ–º (—Å—Ç–µ–ø–µ–Ω—å {degree})", f"MSE={mse:.6f}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

with tabs[8]:
    st.header("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

    analysis_type = st.selectbox("–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞", [
        "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –§—É—Ä—å–µ", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏—è",
        "–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
    ])

    if analysis_type == "–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –§—É—Ä—å–µ":
        st.subheader("FFT - –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –§—É—Ä—å–µ")

        signal_type = st.selectbox(
            "–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞", ["–°–∏–Ω—É—Å", "–°—É–º–º–∞ —Å–∏–Ω—É—Å–æ–≤", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"])

        if signal_type == "–°–∏–Ω—É—Å":
            freq = st.slider("–ß–∞—Å—Ç–æ—Ç–∞ (–ì—Ü)", 1.0, 50.0, 5.0)
            amplitude = st.slider("–ê–º–ø–ª–∏—Ç—É–¥–∞", 0.1, 10.0, 1.0)

            t = np.linspace(0, 1, 1000)
            signal = amplitude * np.sin(2 * np.pi * freq * t)

        elif signal_type == "–°—É–º–º–∞ —Å–∏–Ω—É—Å–æ–≤":
            st.write("–°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª: sin(2œÄf‚ÇÅt) + 0.5¬∑sin(2œÄf‚ÇÇt)")
            col1, col2 = st.columns(2)
            with col1:
                f1 = st.number_input("–ß–∞—Å—Ç–æ—Ç–∞ f‚ÇÅ", value=5.0)
            with col2:
                f2 = st.number_input("–ß–∞—Å—Ç–æ—Ç–∞ f‚ÇÇ", value=20.0)

            t = np.linspace(0, 1, 1000)
            signal = np.sin(
                2 * np.pi * f1 * t) + 0.5 * np.sin(2 * np.pi * f2 * t)

        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å FFT", type="primary"):
            fft_result = fft.fft(signal)
            freqs = fft.fftfreq(len(signal), t[1] - t[0])

            fig = make_subplots(rows=2,
                                cols=1,
                                subplot_titles=("–ò—Å—Ö–æ–¥–Ω—ã–π —Å–∏–≥–Ω–∞–ª",
                                                "–°–ø–µ–∫—Ç—Ä –§—É—Ä—å–µ"))

            fig.add_trace(go.Scatter(x=t,
                                     y=signal,
                                     mode='lines',
                                     name='–°–∏–≥–Ω–∞–ª'),
                          row=1,
                          col=1)

            mask = freqs > 0
            fig.add_trace(go.Scatter(x=freqs[mask],
                                     y=np.abs(fft_result[mask]),
                                     mode='lines',
                                     name='–ê–º–ø–ª–∏—Ç—É–¥–Ω—ã–π —Å–ø–µ–∫—Ç—Ä'),
                          row=2,
                          col=1)

            fig.update_xaxes(title_text="–í—Ä–µ–º—è (—Å)", row=1, col=1)
            fig.update_xaxes(title_text="–ß–∞—Å—Ç–æ—Ç–∞ (–ì—Ü)", row=2, col=1)
            fig.update_yaxes(title_text="–ê–º–ø–ª–∏—Ç—É–¥–∞", row=1, col=1)
            fig.update_yaxes(title_text="–ú–æ—â–Ω–æ—Å—Ç—å", row=2, col=1)

            fig.update_layout(height=800, template=graph_theme)

            st.plotly_chart(fig, use_container_width=True)

            dominant_freq = freqs[mask][np.argmax(np.abs(fft_result[mask]))]
            st.success(f"–î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: {dominant_freq:.2f} –ì—Ü")

    elif analysis_type == "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –∏ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏—è":
        st.subheader("–ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏")

        n_points = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫", 10, 200, 50)

        col1, col2 = st.columns(2)
        with col1:
            correlation = st.slider("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è", -1.0, 1.0, 0.8)
        with col2:
            noise_level = st.slider("–£—Ä–æ–≤–µ–Ω—å —à—É–º–∞", 0.0, 2.0, 0.5)

        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
            mean = [0, 0]
            cov = [[1, correlation], [correlation, 1]]
            data = np.random.multivariate_normal(mean, cov, n_points)
            data += np.random.normal(0, noise_level, data.shape)

            x_data = data[:, 0]
            y_data = data[:, 1]

            actual_corr = np.corrcoef(x_data, y_data)[0, 1]
            actual_cov = np.cov(x_data, y_data)[0, 1]

            fig = px.scatter(x=x_data,
                             y=y_data,
                             labels={
                                 'x': 'X',
                                 'y': 'Y'
                             },
                             title="–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è")

            z = np.polyfit(x_data, y_data, 1)
            p = np.poly1d(z)
            x_line = np.linspace(x_data.min(), x_data.max(), 100)

            fig.add_trace(
                go.Scatter(x=x_line,
                           y=p(x_line),
                           mode='lines',
                           name='–õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞',
                           line=dict(color='red', width=2)))

            fig.update_layout(template=graph_theme, height=600)
            st.plotly_chart(fig, use_container_width=True)

            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è", f"{actual_corr:.4f}")
            with col2:
                st.metric("–ö–æ–≤–∞—Ä–∏–∞—Ü–∏—è", f"{actual_cov:.4f}")
            with col3:
                st.metric("R¬≤", f"{actual_corr**2:.4f}")

    elif analysis_type == "–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        st.subheader("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è")

        st.write("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")

        n_samples = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π", 20, 200, 50)
        n_features = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", 1, 5, 2)

        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–≥—Ä–µ—Å—Å–∏—é", type="primary"):
            X = np.random.randn(n_samples, n_features)
            true_coeffs = np.random.randn(n_features)
            y = X @ true_coeffs + np.random.randn(n_samples) * 0.5

            coeffs = linalg.lstsq(X, y)[0]
            y_pred = X @ coeffs

            residuals = y - y_pred
            ss_res = np.sum(residuals**2)
            ss_tot = np.sum((y - np.mean(y))**2)
            r_squared = 1 - (ss_res / ss_tot)

            fig = go.Figure()
            fig.add_trace(
                go.Scatter(x=y, y=y_pred, mode='markers', name='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è'))

            fig.add_trace(
                go.Scatter(x=[y.min(), y.max()],
                           y=[y.min(), y.max()],
                           mode='lines',
                           name='–ò–¥–µ–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è',
                           line=dict(dash='dash', color='red')))

            fig.update_layout(title="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è",
                              xaxis_title="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ",
                              yaxis_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ",
                              template=graph_theme)

            st.plotly_chart(fig, use_container_width=True)

            st.success("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:")
            for i, coef in enumerate(coeffs):
                st.write(f"Œ≤_{i+1} = {coef:.4f}")

            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("R¬≤", f"{r_squared:.4f}")
            with col2:
                st.metric("RMSE", f"{np.sqrt(np.mean(residuals**2)):.4f}")
            with col3:
                st.metric("MAE", f"{np.mean(np.abs(residuals)):.4f}")

with tabs[9]:
    st.header("–†–µ—à–µ–Ω–∏–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π")
    ode_type = st.selectbox("–¢–∏–ø –∑–∞–¥–∞—á–∏", [
        "–û–î–£ 1-–≥–æ –ø–æ—Ä—è–¥–∫–∞: dy/dt = f(t, y)",
        "–û–î–£ 2-–≥–æ –ø–æ—Ä—è–¥–∫–∞ ‚Üí —Å–∏—Å—Ç–µ–º–∞",
        "–°–∏—Å—Ç–µ–º–∞ –û–î–£"
    ])

    if ode_type == "–û–î–£ 1-–≥–æ –ø–æ—Ä—è–¥–∫–∞: dy/dt = f(t, y)":
        st.subheader("dy/dt = f(t, y)")
        f_expr = st.text_input("–ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å f(t, y)", value="t - y")
        t0 = st.number_input("–ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è t‚ÇÄ", value=0.0)
        y0 = st.number_input("–ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ y(t‚ÇÄ)", value=1.0)
        t_end = st.number_input("–ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è", value=5.0)
        steps = st.slider("–ß–∏—Å–ª–æ —à–∞–≥–æ–≤", 50, 1000, 200)

        if st.button("–†–µ—à–∏—Ç—å –û–î–£", type="primary"):
            try:
                t_sym, y_sym = sp.symbols('t y')
                f_sympy = sp.sympify(f_expr)
                f_func = sp.lambdify((t_sym, y_sym), f_sympy, 'numpy')

                def dydt(t, y):
                    return f_func(t, y)

                t_eval = np.linspace(t0, t_end, steps)
                sol = integrate.solve_ivp(dydt, [t0, t_end], [y0], t_eval=t_eval, method='RK45')

                fig = go.Figure()
                fig.add_trace(go.Scatter(x=sol.t, y=sol.y[0], mode='lines', name='y(t)'))
                fig.update_layout(title=f"–†–µ—à–µ–Ω–∏–µ dy/dt = {f_expr}", xaxis_title="t", yaxis_title="y", template=graph_theme)
                st.plotly_chart(fig, use_container_width=True)

                st.success("–†–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ!")
                save_to_history(f"–û–î–£ 1-–≥–æ –ø–æ—Ä—è–¥–∫–∞: {f_expr}", f"y({t0})={y0}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ –û–î–£: {str(e)}")

    elif ode_type == "–û–î–£ 2-–≥–æ –ø–æ—Ä—è–¥–∫–∞ ‚Üí —Å–∏—Å—Ç–µ–º–∞":
        st.subheader("–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ y'' = f(t, y, y') –∫ —Å–∏—Å—Ç–µ–º–µ")
        st.markdown("–ü—É—Å—Ç—å **y‚ÇÅ = y**, **y‚ÇÇ = y'**, —Ç–æ–≥–¥–∞:\n- y‚ÇÅ' = y‚ÇÇ\n- y‚ÇÇ' = f(t, y‚ÇÅ, y‚ÇÇ)")
        f_expr = st.text_input("f(t, y, dy/dt)", value="-y")
        t0 = st.number_input("t‚ÇÄ", value=0.0)
        y0 = st.number_input("y(t‚ÇÄ)", value=1.0)
        dy0 = st.number_input("y'(t‚ÇÄ)", value=0.0)
        t_end = st.number_input("–ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è", value=10.0)
        steps = st.slider("–ß–∏—Å–ª–æ —à–∞–≥–æ–≤", 50, 1000, 300)

        if st.button("–†–µ—à–∏—Ç—å –û–î–£ 2-–≥–æ –ø–æ—Ä—è–¥–∫–∞", type="primary"):
            try:
                t_sym, y_sym, dy_sym = sp.symbols('t y dy')
                f_sympy = sp.sympify(f_expr)
                f_func = sp.lambdify((t_sym, y_sym, dy_sym), f_sympy, 'numpy')

                def system(t, Y):
                    y1, y2 = Y
                    return [y2, f_func(t, y1, y2)]

                t_eval = np.linspace(t0, t_end, steps)
                sol = integrate.solve_ivp(system, [t0, t_end], [y0, dy0], t_eval=t_eval, method='RK45')

                fig = go.Figure()
                fig.add_trace(go.Scatter(x=sol.t, y=sol.y[0], mode='lines', name='y(t)'))
                fig.add_trace(go.Scatter(x=sol.t, y=sol.y[1], mode='lines', name="y'(t)", line=dict(dash='dash')))
                fig.update_layout(title=f"–†–µ—à–µ–Ω–∏–µ y'' = {f_expr}", xaxis_title="t", yaxis_title="y, y'", template=graph_theme)
                st.plotly_chart(fig, use_container_width=True)

                st.success("–°–∏—Å—Ç–µ–º–∞ —Ä–µ—à–µ–Ω–∞!")
                save_to_history(f"–û–î–£ 2-–≥–æ –ø–æ—Ä—è–¥–∫–∞: y'' = {f_expr}", f"y({t0})={y0}, y'({t0})={dy0}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

    elif ode_type == "–°–∏—Å—Ç–µ–º–∞ –û–î–£":
        st.subheader("–°–∏—Å—Ç–µ–º–∞: dY/dt = F(t, Y)")
        n_eq = st.number_input("–ß–∏—Å–ª–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–π", 2, 4, 2)
        equations = []
        initials = []
        for i in range(n_eq):
            eq = st.text_input(f"dy{i}/dt =", value="y1" if i == 0 else "-y0", key=f"ode_eq_{i}")
            y0_val = st.number_input(f"y{i}(t‚ÇÄ)", value=1.0 if i == 0 else 0.0, key=f"ode_y0_{i}")
            equations.append(eq)
            initials.append(y0_val)

        t0 = st.number_input("–ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è t‚ÇÄ", value=0.0, key="sys_t0")
        t_end = st.number_input("–ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è", value=10.0, key="sys_tend")
        steps = st.slider("–ß–∏—Å–ª–æ —à–∞–≥–æ–≤", 50, 1000, 200, key="sys_steps")

        if st.button("–†–µ—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –û–î–£", type="primary"):
            try:
                t_sym = sp.Symbol('t')
                y_syms = sp.symbols(' '.join([f'y{i}' for i in range(n_eq)]))
                funcs = []
                for eq in equations:
                    expr = sp.sympify(eq)
                    funcs.append(sp.lambdify((t_sym,) + y_syms, expr, 'numpy'))

                def sys_ode(t, Y):
                    return [f(t, *Y) for f in funcs]

                t_eval = np.linspace(t0, t_end, steps)
                sol = integrate.solve_ivp(sys_ode, [t0, t_end], initials, t_eval=t_eval, method='RK45')

                fig = go.Figure()
                for i in range(n_eq):
                    fig.add_trace(go.Scatter(x=sol.t, y=sol.y[i], mode='lines', name=f'y{i}(t)'))
                fig.update_layout(title="–†–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –û–î–£", xaxis_title="t", yaxis_title="y·µ¢(t)", template=graph_theme)
                st.plotly_chart(fig, use_container_width=True)

                st.success("–°–∏—Å—Ç–µ–º–∞ —Ä–µ—à–µ–Ω–∞!")
                save_to_history(f"–°–∏—Å—Ç–µ–º–∞ –û–î–£: {', '.join(equations)}", f"–ù–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {initials}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

st.markdown("---")
st.markdown(
    "<div>"
    "üßÆ <b>–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b><br>"
    "<span style='font-size: 0.8rem;'>"
    "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç: Streamlit ‚Ä¢ NumPy ‚Ä¢ SciPy ‚Ä¢ SymPy ‚Ä¢ Plotly ‚Ä¢ Pandas<br>"
    "2025 | by quik"
    "</span>"
    "</div>",
    unsafe_allow_html=True
)

st.markdown(
    "<div style='font-size: 0.8rem;'>"
    "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: <a href='https://github.com/QUIK1001/Event-Horizon-Shell'>GitHub</a><br>"
    "–ö–æ–Ω—Ç–∞–∫—Ç—ã: <a href='mailto:belov0507artem@gmail.com'>belov0507artem@gmail.com</a>"
    "</div>",
    unsafe_allow_html=True
)
